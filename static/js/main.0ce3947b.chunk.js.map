{"version":3,"sources":["atoms.tsx","components/CreateCategory.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","categoryListState","toDoState","localStorage","getItem","JSON","parse","toDoSelector","selector","get","toDos","category","setItem","stringify","filter","toDo","categoryList","console","log","CreateCategory","setCategoryList","useSetRecoilState","useForm","register","handleSubmit","setValue","Form","onSubmit","oldCategoryList","Input","required","placeholder","Button","styled","form","input","button","CreateToDo","setToDos","useRecoilValue","oldToDos","text","id","Date","now","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","Text","DOING","DONE","span","ToDoList","categoriesList","useRecoilState","setCategory","Container","Title","Select","value","onInput","map","item","section","h1","select","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","useEffect","length","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.0ce3947b.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nexport enum Categories {\n\t'TO_DO' = 'TO_DO',\n\t'DOING' = 'DOING',\n\t'DONE' = 'DONE',\n}\nexport interface IToDo {\n\ttext: string;\n\tid: number;\n\tcategory: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n\tkey: 'category',\n\tdefault: Categories.TO_DO,\n});\n\nexport const categoryListState = atom<string[]>({\n\tkey: 'categoryListState',\n\tdefault: ['TO_DO', 'DOING', 'DONE'],\n});\n\nexport const toDoState = atom<IToDo[]>({\n\tkey: 'toDo',\n\tdefault: localStorage.getItem('todoArr') !== null ? JSON.parse(localStorage.getItem('todoArr') as string) : [],\n});\n\nexport const toDoSelector = selector({\n\tkey: 'toDoSelector',\n\tget: ({ get }) => {\n\t\tconst toDos = get(toDoState);\n\t\tconst category = get(categoryState);\n\t\tlocalStorage.setItem('todoArr', JSON.stringify(toDos));\n\t\treturn toDos.filter((toDo) => toDo.category === category);\n\t},\n});\n\nexport const categoryListSelector = selector({\n\tkey: 'categoryListSelector',\n\tget: ({ get }) => {\n\t\tconst categoryList = get(categoryListState);\n\t\tlocalStorage.setItem('categoryListState', JSON.stringify(categoryList));\n\n\t\treturn console.log(localStorage.getItem('categoryListState'));\n\t},\n});\n","import { categoryListState } from '../atoms';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\n\nexport default function CreateCategory() {\n\tconst setCategoryList = useSetRecoilState(categoryListState);\n\tconst { register, handleSubmit, setValue } = useForm();\n\tconst handleValid = ({ category }: any) => {\n\t\tsetCategoryList((oldCategoryList) => [...oldCategoryList, category]);\n\t\tsetValue('category', '');\n\t};\n\treturn (\n\t\t<Form onSubmit={handleSubmit(handleValid)}>\n\t\t\t<Input\n\t\t\t\t{...register('category', {\n\t\t\t\t\trequired: 'Please write a New Category',\n\t\t\t\t})}\n\t\t\t\tplaceholder=\"Write a New Category\"\n\t\t\t/>\n\t\t\t<Button>Add</Button>\n\t\t</Form>\n\t);\n}\n\nconst Form = styled.form`\n\twidth: 100%;\n\ttext-align: center;\n\tmargin-bottom: 40px;\n`;\n\nconst Input = styled.input`\n\tmax-width: 500px;\n\tmin-width: 200px;\n\theight: 40px;\n\tborder-radius: 10px;\n\tbox-shadow: none;\n\tborder: 2px solid white;\n`;\n\nconst Button = styled.button`\n\twidth: 50px;\n\theight: 40px;\n\tborder-radius: 10px;\n\ttext-shadow: none;\n\tborder: 2px solid white;\n\tbackground-color: teal;\n\tcolor: white;\n\tfont-size: 15px;\n\tfont-weight: bold;\n`;\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { categoryState, toDoState } from '../atoms';\n\ninterface IForm {\n\ttoDo: string;\n}\n\nfunction CreateToDo() {\n\tconst setToDos = useSetRecoilState(toDoState);\n\tconst category = useRecoilValue(categoryState);\n\tconst { register, handleSubmit, setValue } = useForm<IForm>();\n\tconst handleValid = ({ toDo }: IForm) => {\n\t\tsetToDos((oldToDos) => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\n\t\tsetValue('toDo', '');\n\t};\n\treturn (\n\t\t<Form onSubmit={handleSubmit(handleValid)}>\n\t\t\t<Input\n\t\t\t\t{...register('toDo', {\n\t\t\t\t\trequired: 'Please write a To Do',\n\t\t\t\t})}\n\t\t\t\tplaceholder=\"Write a to do\"\n\t\t\t/>\n\t\t\t<Button>Add</Button>\n\t\t</Form>\n\t);\n}\n\nexport default CreateToDo;\n\nconst Form = styled.form`\n\twidth: 100%;\n\ttext-align: center;\n\tmargin-bottom: 40px;\n`;\n\nconst Input = styled.input`\n\tmax-width: 500px;\n\tmin-width: 200px;\n\theight: 40px;\n\tborder-radius: 10px;\n\tbox-shadow: none;\n\tborder: 2px solid white;\n`;\n\nconst Button = styled.button`\n\twidth: 50px;\n\theight: 40px;\n\tborder-radius: 10px;\n\ttext-shadow: none;\n\tborder: 2px solid white;\n\tbackground-color: teal;\n\tcolor: white;\n\tfont-size: 15px;\n\tfont-weight: bold;\n`;\n","import React from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { Categories, IToDo, toDoState } from '../atoms';\n\nfunction ToDo({ text, category, id }: IToDo) {\n\tconst setToDos = useSetRecoilState(toDoState);\n\tconst onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n\t\tconst {\n\t\t\tcurrentTarget: { name },\n\t\t} = event;\n\t\tsetToDos((oldToDos) => {\n\t\t\tconst targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n\t\t\tconst newToDo = { text, id, category: name as any };\n\t\t\treturn [...oldToDos.slice(0, targetIndex), newToDo, ...oldToDos.slice(targetIndex + 1)];\n\t\t});\n\t};\n\treturn (\n\t\t<li>\n\t\t\t<Text>{text}</Text>\n\t\t\t{category !== Categories.DOING && (\n\t\t\t\t<button name={Categories.DOING} onClick={onClick}>\n\t\t\t\t\tDoing\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{category !== Categories.TO_DO && (\n\t\t\t\t<button name={Categories.TO_DO} onClick={onClick}>\n\t\t\t\t\tTo Do\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{category !== Categories.DONE && (\n\t\t\t\t<button name={Categories.DONE} onClick={onClick}>\n\t\t\t\t\tDone\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</li>\n\t);\n}\n\nexport default ToDo;\n\nconst Text = styled.span`\n\tfont-size: 15px;\n\tcolor: white;\n\tfont-weight: bold;\n\tmargin-right: 10px;\n`;\n","import React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { categoryListState, categoryState, toDoSelector } from '../atoms';\nimport CreateCategory from './CreateCategory';\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\n\nfunction ToDoList() {\n\tconst toDos = useRecoilValue(toDoSelector);\n\tconst categoriesList = useRecoilValue(categoryListState);\n\n\tconst [category, setCategory] = useRecoilState(categoryState);\n\tconst onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n\t\tsetCategory(event.currentTarget.value as any);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Title>To Dos</Title>\n\t\t\t<CreateCategory />\n\t\t\t<Select value={category} onInput={onInput}>\n\t\t\t\t{categoriesList.map((item) => (\n\t\t\t\t\t<option value={item}>{item}</option>\n\t\t\t\t))}\n\t\t\t</Select>\n\t\t\t<CreateToDo />\n\t\t\t{toDos?.map((toDo) => (\n\t\t\t\t<ToDo key={toDo.id} {...toDo} />\n\t\t\t))}\n\t\t</Container>\n\t);\n}\n\nexport default ToDoList;\n\nconst Container = styled.section`\n\tmax-width: 800px;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\tmargin: 0 auto;\n`;\n\nconst Title = styled.h1`\n\tfont-size: 25px;\n\tfont-weight: bold;\n\ttext-align: center;\n\tmargin-bottom: 20px;\n\tmargin-top: 15px;\n`;\n\nconst Select = styled.select`\n\twidth: 100px;\n\theight: 30px;\n\tborder-radius: 10px;\n\ttext-align: center;\n\tmargin-bottom: 30px;\n`;\n","import { useEffect } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport ToDoList from './components/ToDoList';\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n\tuseEffect(() => {\n\t\tif (localStorage.getItem('todoArr')?.length === 0) {\n\t\t\tlocalStorage.setItem('todoArr', JSON.stringify([]));\n\t\t}\n\t}, []);\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<ToDoList />\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { darkTheme } from './theme';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<RecoilRoot>\n\t\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t\t<App />\n\t\t\t</ThemeProvider>\n\t\t</RecoilRoot>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n\tbgColor: '#2f3640',\n\ttextColor: 'white',\n\taccentColor: '#9c88ff',\n\tcardBgColor: 'transparent',\n};\n"],"sourceRoot":""}